###################################数据合并
FoodScore<-read.table(file="美食评分数据.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
ResInf<-read.table(file="餐馆信息.csv",header=TRUE,sep=",",stringsAsFactors=FALSE)
MyData<-merge(ResInf,FoodScore,by="shop_ID")    #合并数据并存入指定的数据框
MyData$shop_ID <- as.character(MyData$shop_ID)  #Change something into certain data type
head(MyData)
#################################数据筛选：只分析五道口和北太平庄地区最受欢迎的10种菜系
Data<-subset(MyData,MyData$region=="五道口" | MyData$region=="北太平庄")
FoodTypeN <- table(Data$food_type)
table(Data$region)
a<-data.frame(FoodTypeN)
FoodType <- names(FoodTypeN)[order(FoodTypeN,decreasing=TRUE)][1:2]
b <- names(FoodTypeN)
c <- order(FoodTypeN,decreasing=TRUE)
bc <- b[c]
bc[1:10]
#########################
mm <- order(Data$cost_avg,decreasing=TRUE)
shoopid <- Data$shop_ID[mm][1:10]
#########################
MyData<-Data[Data$food_type %in% FoodType,]
c<-c(1,2)
c(1,3,2,23,2,3) %in% c
dim(MyData)
#########################生成缺失报告
fix(MyData)
flag<-is.na(MyData$taste)
MyData[flag,] 
flag<-complete.cases(MyData)
MyData[!flag,]
library('mice')
md.pattern(MyData[,-(1:3)])
MyData<-na.omit(MyData)
######################异常值排查
Ord<-order(MyData$cost_avg,na.last=TRUE,decreasing=FALSE) 
head(Ord)
head(MyData[Ord,])
order(MyData$cost_avg)
Ord<-order(-MyData$review_n,+MyData$cost_avg,na.last=TRUE)
head(MyData[Ord,])
MyData$cost_avg <- ifelse(MyData$cost_avg==-1,NA,MyData$cost_avg)
MyData<-na.omit(MyData)  #完整样本
dim(MyData)
write.table(MyData,file="美食餐馆食客评分数据.txt",row.names = FALSE)

################数据分组
MyData<-read.table(file="美食餐馆食客评分数据.txt",header=TRUE,sep=" ",stringsAsFactors=FALSE)
flag<-quantile(MyData$review_n,c(0.25,0.5,0.75,0.90))
MyData$heat<-0
MyData[MyData$review_n<flag[1],"heat"]<-1
MyData[MyData$review_n<flag[1],]$heat <-1
MyData[MyData$review_n>=flag[1]& MyData$review_n<flag[2],"heat"]<-2
MyData[MyData$review_n>=flag[2]& MyData$review_n<flag[3],"heat"]<-3
MyData[MyData$review_n>=flag[3]& MyData$review_n<flag[4],"heat"]<-4
MyData[MyData$review_n>=flag[4],"heat"]<-5
table(MyData$heat)
MyData$heat<-as.factor(MyData$heat)
write.table(MyData,file="美食餐馆食客评分数据.txt",row.names = FALSE)

####################分支结构
Price<-scan()
if(Price<200) print("No discount!")
if(Price>=200 & Price<500)  print("off 3%")
if(Price>500 & Price<1000) print("off 5%")
if(Price>=1000 & Price<2500) print("off 8%")
if(Price>=2500 & Price<5000) print("off 10%")
if(Price>=5000) print("off 15%")

if(Price<200) print("No discount!") else{
    if(Price>=200 & Price<500) print("off 3%") else{
     if(Price>=500 & Price<1000) print("off 5%") else{
      if(Price>=1000 & Price<2500) print("off 8%") else{
        if(Price>=2500 & Price<5000) print("off 10%") else
          print("off 15%")
            }
         }
      }
   }

##################循环结构
s<-0                        
for(i in 1:100){    
  s<-s+i             
 }
print(s)               


s<-0                   
i<-1                      
while(i<=100){          
    s<-s+i                    
    i<-i+1                 
   }
 print(s)                    

 s<-0                     
 i<-1                     
 repeat{                
    if(i<=100){               
         s<-s+i
         i<-i+1} else              
         break             
    }
print(s)

####################上课增加的内容：计算一组数据的标准差
a<-1:100
(sd(a))

S<-0
n<-length(a)
for(i in 1:n)
 S<-S+a[i]
pjz<-S/n
S<-0
for(i in 1:n)
 S<-S+(a[i]-pjz)^2
(S1<-sqrt(S/n))
(S2<-sqrt(S/(n-1)))


####################用户自定义函数:上课增加的内容：找到一组数据的最大数
MyMax<-function(x){
 M<--1E-10
 for(i in 1:length(x))
  if(M<x[i]) M<-x[i]
 return(M)
}
(Max<-MyMax(100:1200))

####################用户自定义函数:上课增加的内容：计算一组数据的标准差


MySd<-function(x){
S<-0
n<-length(x)
for(i in 1:n)
 S<-S+x[i]
pjz<-S/n
S<-0
for(i in 1:n)
 S<-S+(x[i]-pjz)^2
S2<-sqrt(S/(n-1))
return(S2)
}

sd(1:100)
(S<-MySd(1:100))



####################用户自定义函数
MyTable<-function(mytable){     #定义用户自定义函数MyTable
    rows<-dim(mytable)[1]     
    cols<-dim(mytable)[2]
    DataTable<-NULL
    for(i in 1:rows){
       for(j in 1:mytable[i,cols]){
          RowData<-mytable[i,c(1:(cols-1))]
          DataTable<-rbind(DataTable,RowData)
         }
      }
    row.names(DataTable)<-c(1:dim(DataTable)[1])
    return(DataTable)
  }
Grade<-rep(c("B","C","D","E"),times=2)      
Sex<-rep(c("M","F"),each=4)              
Freq<-c(2,11,12,5,2,13,10,3)               
Table<-data.frame(sex=Sex,grade=Grade,freq=Freq)  
MyData<-MyTable(Table)     

#############################顾客的RFM计算
MyData<-read.table(file="顾客交易数据.txt",header=TRUE,sep=",",stringsAsFactors=FALSE)
ID<-unique(MyData$CardID)
RFM<-data.frame(CardID=character(0),R=numeric(0),F=numeric(0),M=numeric(0),stringsAsFactors=FALSE)
for(i in 1:length(ID)){
  T<-subset(MyData,MyData$CardID==ID[i])
  RFM[i,"CardID"]<-ID[i]
  RFM[i,"F"]<-table(T$CardID)
  RFM[i,"M"]<-sum(T$Amount)
  D<-max(T$Date)
  D<-as.Date(substr(as.character(D),3,8),format="%y%m%d")
  RFM[i,"R"]<-Sys.Date()-D
}
head(RFM)


#########################北京市空气质量监测数据的整理
Root <- "D:/空气质量监测部分原始数据"
setwd(Root)
FileNames <- list.files(".")  # 获得文件夹中所有文件的文件名
MyData<-read.table(file=FileNames[1],header=FALSE,skip=1,sep=",")
for (i in 2:length(FileNames)) { #合并数据文件
  T<-read.table(file=FileNames[i],header=FALSE,skip=1,sep=",")
  MyData<-rbind(MyData,T)
}
VNames<-c("date","hour","type") 
SiteName<-c("东四","天坛","官园","万寿西宫","奥体中心","农展馆","万柳","北部新区","植物园","丰台花园",
            "云岗","古城","房山","大兴","亦庄","通州","顺义","昌平","门头沟","平谷","怀柔","密云","延庆","定陵",
            "八达岭","密云水库","东高村","永乐店","榆垡","琉璃河","前门","永定门内","西直门北","南三环","东四环")
colnames(MyData)<-c(VNames,SiteName)
##计算每天空气指标的平均值
AggData<-aggregate(MyData[,-(1:3)],by=list(MyData$date,MyData$type),FUN=mean,na.rm=TRUE)
library("reshape")
Data<-cast(AggData[,1:3],Group.1~Group.2)
Data$SiteName<-SiteName[1]
j<-2
for(i in 4:37){
  T<-cast(AggData[,c(1,2,i)],Group.1~Group.2)
  T$SiteName<-SiteName[j]
  Data<-rbind(Data,T)
  j<-j+1
}


